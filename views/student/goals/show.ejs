<% layout('layout/boilerplate.ejs') %>

<div class="container-fluid py-4">
  <div class="row">
    <!-- Main Content -->
    <div class="col-lg-8">
      <!-- Goal Header -->
      <div class="card mb-4">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-start mb-3">
            <div>
              <h1 class="h2 mb-2"><%= goal.title %></h1>
              <p class="text-muted mb-1"><%= goal.category || 'General' %> â€¢ <%= (goal.status || 'in-progress').replace('-', ' ').toUpperCase() %></p>
              <small class="text-muted">Created <%= new Date(goal.createdAt).toLocaleDateString() %></small>
            </div>
            <span id="statusBadge" class="badge fs-6 px-3 py-2 <%= goal.status === 'completed' ? 'bg-success' : goal.status === 'in-progress' ? 'bg-primary' : goal.status === 'overdue' ? 'bg-danger' : 'bg-secondary' %>">
              <%= (goal.status || 'in-progress').replace('-', ' ').toUpperCase() %>
            </span>
          </div>

          <% if (goal.description) { %>
            <p class="lead"><%= goal.description %></p>
          <% } %>
        </div>
      </div>

      <!-- Progress Section -->
      <div class="card mb-4">
        <div class="card-header">
          <h5 class="mb-0">Progress</h5>
        </div>
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-center mb-3">
            <span class="h6 mb-0">Current Progress</span>
            <div class="d-flex align-items-center gap-3">
              <span id="progressValue" class="fw-bold"><%= goal.progress || 0 %>%</span>
              <button id="updateProgressBtn" class="btn btn-outline-secondary btn-sm">Update</button>
            </div>
          </div>
          <div class="progress mb-3" style="height: 10px;">
            <div id="progressBar" class="progress-bar" role="progressbar" style="width: <%= goal.progress || 0 %>%;" aria-valuenow="<%= goal.progress || 0 %>" aria-valuemin="0" aria-valuemax="100"></div>
          </div>

          <!-- Progress Update Form (hidden by default) -->
          <div id="progressUpdateForm" style="display: none;">
            <form id="progressForm" class="row g-3 align-items-end">
              <div class="col-md-6">
                <label class="form-label">Progress (%)</label>
                <input type="range" class="form-range" id="progressRange" name="progress" min="0" max="100" value="<%= goal.progress || 0 %>">
              </div>
              <div class="col-md-3">
                <input type="number" class="form-control" id="progressNumber" name="progress" min="0" max="100" value="<%= goal.progress || 0 %>">
              </div>
              <div class="col-md-3">
                <button type="submit" class="btn btn-primary me-2">Save</button>
                <button type="button" class="btn btn-secondary" id="cancelProgressBtn">Cancel</button>
              </div>
            </form>
          </div>
        </div>
      </div>

      <!-- Milestones Section -->
      <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5 class="mb-0">Milestones</h5>
          <button id="addMilestoneBtn" class="btn btn-outline-primary btn-sm">
            <i class="fas fa-plus me-1"></i>Add Milestone
          </button>
        </div>
        <div class="card-body">
          <ul id="milestonesList" class="list-group list-group-flush">
            <% if (goal.milestones && goal.milestones.length > 0) { %>
              <% goal.milestones.forEach(function(ms, idx) { %>
                <li class="list-group-item d-flex align-items-center justify-content-between" data-index="<%= idx %>">
                  <div class="d-flex align-items-center gap-3">
                    <input class="form-check-input milestone-checkbox" type="checkbox" style="width: 18px; height: 18px;" <% if (ms.completed) { %>checked<% } %> />
                    <div>
                      <div class="milestone-title fw-medium" contenteditable="false" data-original="<%= ms.title %>"><%= ms.title %></div>
                      <% if (ms.dueDate) { %>
                        <small class="text-muted">Due: <%= new Date(ms.dueDate).toLocaleDateString() %></small>
                      <% } %>
                    </div>
                  </div>
                  <div class="d-flex gap-2">
                    <button class="btn btn-sm btn-outline-secondary edit-milestone-btn">Edit</button>
                    <button class="btn btn-sm btn-outline-danger delete-milestone-btn">Delete</button>
                  </div>
                </li>
              <% }); %>
            <% } else { %>
              <li class="list-group-item text-center text-muted py-4">
                No milestones yet. Add one to break this goal into smaller steps.
              </li>
            <% } %>
          </ul>

          <!-- Add milestone form (hidden) -->
          <div id="addMilestoneForm" class="mt-3" style="display: none;">
            <form id="addMilestone" class="row g-3">
              <div class="col-md-6">
                <input id="newMilestoneTitle" class="form-control" placeholder="Milestone title" required>
              </div>
              <div class="col-md-4">
                <input id="newMilestoneDue" type="date" class="form-control">
              </div>
              <div class="col-md-2">
                <button class="btn btn-primary w-100" type="submit">Add</button>
              </div>
            </form>
          </div>
        </div>
      </div>

      <!-- AI Plan Section -->
      <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5 class="mb-0">AI Study Plan</h5>
          <button id="regeneratePlanBtn" class="btn btn-outline-info btn-sm">
            <i class="fas fa-sync-alt me-1"></i>Regenerate
          </button>
        </div>
        <div class="card-body">
          <div id="aiPlanContainer">
            <% if (goal.tips && goal.tips.length) { %>
              <h6>Study Tips</h6>
              <ul class="mb-3">
                <% goal.tips.forEach(function(tip) { %>
                  <li><%= tip %></li>
                <% }) %>
              </ul>
            <% } %>

            <% if (goal.aiSuggestions && goal.aiSuggestions.length) { %>
              <h6>Suggested Plan</h6>
              <ol>
                <% goal.aiSuggestions.forEach(function(step) { %>
                  <li class="mb-2"><%= step %></li>
                <% }) %>
              </ol>
            <% } %>

            <% if ((!goal.tips || !goal.tips.length) && (!goal.aiSuggestions || !goal.aiSuggestions.length)) { %>
              <p class="text-muted text-center py-3">No AI plan generated yet. Click "Regenerate" to get suggestions.</p>
            <% } %>
          </div>
        </div>
      </div>
    </div>

    <!-- Sidebar -->
    <div class="col-lg-4">
      <!-- Quick Actions -->
      <div class="card mb-4">
        <div class="card-header">
          <h6 class="mb-0">Actions</h6>
        </div>
        <div class="card-body">
          <div class="d-grid gap-2">
            <a href="/goals/<%= goal._id %>/edit" class="btn btn-outline-primary">Edit Goal</a>
            <button type="button" id="markCompleteBtn" class="btn btn-success">Mark Complete</button>
            <form id="deleteForm" action="/goals/<%= goal._id %>?_method=DELETE" method="POST" onsubmit="return confirm('Are you sure you want to delete this goal?')">
              <button type="submit" class="btn btn-outline-danger w-100">Delete Goal</button>
            </form>
          </div>
        </div>
      </div>

      <!-- Goal Details -->
      <div class="card mb-4">
        <div class="card-header">
          <h6 class="mb-0">Details</h6>
        </div>
        <div class="card-body">
          <div class="mb-3">
            <small class="text-muted d-block">Target Date</small>
            <strong><%= new Date(goal.targetDate).toLocaleDateString() %></strong>
          </div>
          <div class="mb-3">
            <small class="text-muted d-block">Priority</small>
            <strong><%= goal.priority || 'Medium' %></strong>
          </div>
          <div class="mb-3">
            <small class="text-muted d-block">Difficulty</small>
            <strong><%= goal.difficulty || 'Medium' %></strong>
          </div>
          <div class="mb-3">
            <small class="text-muted d-block">Time Remaining</small>
            <strong id="countdownBadge"></strong>
          </div>
          <% if (goal.motivation) { %>
            <div>
              <small class="text-muted d-block">Motivation</small>
              <p class="mb-0"><%= goal.motivation %></p>
            </div>
          <% } %>
        </div>
      </div>

      <!-- Progress Summary -->
      <div class="card">
        <div class="card-header">
          <h6 class="mb-0">Summary</h6>
        </div>
        <div class="card-body">
          <div class="d-flex justify-content-between mb-2">
            <span>Total Milestones</span>
            <span class="fw-bold"><%= goal.milestones ? goal.milestones.length : 0 %></span>
          </div>
          <div class="d-flex justify-content-between mb-2">
            <span>Completed</span>
            <span class="fw-bold text-success"><%= goal.milestones ? goal.milestones.filter(m => m.completed).length : 0 %></span>
          </div>
          <div class="d-flex justify-content-between">
            <span>Remaining</span>
            <span class="fw-bold text-warning"><%= goal.milestones ? goal.milestones.filter(m => !m.completed).length : 0 %></span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Helper: get base endpoint for this goal
  const TASK_ID = "<%= goal._id %>";
  const API_BASE = `/goals/${TASK_ID}`;

  // ---------- Countdown ----------
  (function initCountdown() {
    const target = new Date("<%= goal.targetDate %>");
    const now = new Date();
    const diffMs = target - now;
    const badge = document.getElementById('countdownBadge');

    if (isNaN(target.getTime())) {
      badge.innerText = 'No target date';
      return;
    }

    const days = Math.ceil(diffMs / (1000 * 60 * 60 * 24));
    if (diffMs < 0) {
      badge.innerText = `Overdue by ${Math.abs(days)} day${Math.abs(days) !== 1 ? 's' : ''}`;
      badge.className = 'text-danger';
    } else if (days <= 3) {
      badge.innerText = `${days} day${days !== 1 ? 's' : ''} left`;
      badge.className = 'text-warning';
    } else {
      badge.innerText = `${days} day${days !== 1 ? 's' : ''} left`;
    }
  })();

  // ---------- Progress Update ----------
  const updateBtn = document.getElementById('updateProgressBtn');
  const progressFormWrapper = document.getElementById('progressUpdateForm');
  const progressForm = document.getElementById('progressForm');
  const progressRange = document.getElementById('progressRange');
  const progressNumber = document.getElementById('progressNumber');
  const progressValue = document.getElementById('progressValue');
  const progressBar = document.getElementById('progressBar');
  const cancelProgressBtn = document.getElementById('cancelProgressBtn');

  function toggleProgressUpdate(show) {
    progressFormWrapper.style.display = show ? 'block' : 'none';
  }

  updateBtn.addEventListener('click', () => toggleProgressUpdate(true));
  cancelProgressBtn.addEventListener('click', () => toggleProgressUpdate(false));

  // sync slider and number
  progressRange.addEventListener('input', (e) => {
    progressNumber.value = e.target.value;
  });
  progressNumber.addEventListener('input', (e) => {
    let v = parseInt(e.target.value || 0, 10);
    if (v < 0) v = 0;
    if (v > 100) v = 100;
    progressRange.value = v;
  });

  progressForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const newProgress = parseInt(progressNumber.value, 10) || 0;

    try {
      const res = await fetch(`${API_BASE}/progress`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ progress: newProgress })
      });
      if (!res.ok) throw new Error('Failed to update progress');
      const data = await res.json();

      // Update UI
      progressValue.innerText = `${data.progress}%`;
      progressBar.style.width = `${data.progress}%`;
      progressBar.setAttribute('aria-valuenow', data.progress);
      toggleProgressUpdate(false);

      // update status badge if server returned new status
      if (data.status) {
        const statusBadge = document.getElementById('statusBadge');
        statusBadge.innerText = (data.status || '').replace('-', ' ').toUpperCase();
        statusBadge.className = 'badge fs-6 px-3 py-2 ' + (data.status === 'completed' ? 'bg-success' : data.status === 'in-progress' ? 'bg-primary' : data.status === 'overdue' ? 'bg-danger' : 'bg-secondary');
      }
    } catch (err) {
      console.error(err);
      alert('Could not update progress. Check console for details.');
    }
  });

  // ---------- Milestones ----------
  const milestonesList = document.getElementById('milestonesList');
  const addMilestoneBtn = document.getElementById('addMilestoneBtn');
  const addMilestoneForm = document.getElementById('addMilestoneForm');
  const addMilestoneEl = document.getElementById('addMilestone');
  const newMilestoneTitle = document.getElementById('newMilestoneTitle');
  const newMilestoneDue = document.getElementById('newMilestoneDue');

  addMilestoneBtn.addEventListener('click', () => {
    addMilestoneForm.style.display = 'block';
    addMilestoneBtn.style.display = 'none';
  });

  // Add milestone submit
  addMilestoneEl.addEventListener('submit', async (e) => {
    e.preventDefault();
    const title = newMilestoneTitle.value.trim();
    const dueDate = newMilestoneDue.value || null;
    if (!title) return;

    try {
      const res = await fetch(`${API_BASE}/milestones`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ title, dueDate })
      });
      if (!res.ok) throw new Error('Failed to add milestone');
      const data = await res.json();
      location.reload();
    } catch (err) {
      console.error(err);
      alert('Could not add milestone.');
    }
  });

  // Delegate milestone interactions
  milestonesList.addEventListener('click', async (e) => {
    const li = e.target.closest('li[data-index]');
    if (!li) return;
    const index = parseInt(li.getAttribute('data-index'), 10);

    // Toggle checkbox
    if (e.target.classList.contains('milestone-checkbox')) {
      const checked = e.target.checked;
      try {
        const res = await fetch(`${API_BASE}/milestones/toggle`, {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ index, completed: checked })
        });
        if (!res.ok) throw new Error('Failed to toggle milestone');
        const data = await res.json();
        location.reload();
      } catch (err) {
        console.error(err);
        alert('Could not update milestone.');
      }
      return;
    }

    // Edit milestone
    if (e.target.classList.contains('edit-milestone-btn')) {
      const titleDiv = li.querySelector('.milestone-title');
      const original = titleDiv.getAttribute('data-original') || titleDiv.innerText;
      if (titleDiv.isContentEditable) {
        const newTitle = titleDiv.innerText.trim();
        titleDiv.contentEditable = "false";
        e.target.innerText = 'Edit';
        try {
          const res = await fetch(`${API_BASE}/milestones`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ index, title: newTitle })
          });
          if (!res.ok) throw new Error('Failed to update milestone');
          const data = await res.json();
          location.reload();
        } catch (err) {
          console.error(err);
          titleDiv.innerText = original;
          alert('Could not save milestone.');
        }
      } else {
        titleDiv.contentEditable = "true";
        titleDiv.focus();
        e.target.innerText = 'Save';
      }
      return;
    }

    // Delete milestone
    if (e.target.classList.contains('delete-milestone-btn')) {
      if (!confirm('Delete this milestone?')) return;
      try {
        const res = await fetch(`${API_BASE}/milestones`, {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ index })
        });
        if (!res.ok) throw new Error('Failed to delete milestone');
        const data = await res.json();
        location.reload();
      } catch (err) {
        console.error(err);
        alert('Could not delete milestone.');
      }
      return;
    }
  });

  // ---------- Mark Complete ----------
  const markCompleteBtn = document.getElementById('markCompleteBtn');
  markCompleteBtn.addEventListener('click', async () => {
    if (!confirm('Mark this task as completed?')) return;
    try {
      const res = await fetch(`${API_BASE}/complete`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status: 'completed', progress: 100 })
      });
      if (!res.ok) throw new Error('Failed to mark complete');
      const data = await res.json();
      location.reload();
    } catch (err) {
      console.error(err);
      alert('Could not mark complete.');
    }
  });

  // ---------- Regenerate AI Plan ----------
  const regenerateBtn = document.getElementById('regeneratePlanBtn');
  regenerateBtn.addEventListener('click', async () => {
    if (!confirm('Regenerate AI plan? This will overwrite existing AI suggestions.')) return;
    try {
      regenerateBtn.disabled = true;
      regenerateBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Generating...';

      const res = await fetch(`${API_BASE}/generate-plan`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          title: "<%= (goal.title || '').replace(/"/g, '\\"') %>",
          subject: "<%= (goal.category || '').replace(/"/g, '\\"') %>",
          type: "<%= (goal.type || '') %>",
          dueDate: "<%= goal.targetDate %>",
          priority: "<%= goal.priority || 'medium' %>",
          difficulty: "<%= goal.difficulty || 'medium' %>",
          description: "<%= (goal.description || '').replace(/"/g, '\\"') %>"
        })
      });

      if (!res.ok) throw new Error('Failed to generate plan');
      const data = await res.json();
      location.reload();
    } catch (err) {
      console.error(err);
      alert('Could not generate AI plan.');
      regenerateBtn.disabled = false;
      regenerateBtn.innerHTML = '<i class="fas fa-sync-alt me-1"></i>Regenerate';
    }
  });
</script>

<style>
  .milestone-title[contenteditable="true"] {
    border-bottom: 1px dashed #dee2e6;
    padding-bottom: 2px;
  }

  .list-group-item {
    border: none;
    border-bottom: 1px solid #f8f9fa;
  }

  .list-group-item:last-child {
    border-bottom: none;
  }
</style>
